// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using amorphie.contract.data.Contexts;

#nullable disable

namespace amorphie.contract.data.Migrations.Pg
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.contract.core.Entity.Common.LanguageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LanguageType", "Common");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Common.MultiLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("LanguageTypeId");

                    b.ToTable("MultiLanguage", "Common");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Common.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Status", "Common");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ContractDefinition", "Cont");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractDocumentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("MinVersiyon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Required")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UseExisting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractDefinitionId");

                    b.HasIndex("DocumentDefinitionId");

                    b.ToTable("ContractDocumentDetail", "Cont");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractEntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractDefinitionId");

                    b.HasIndex("EntityPropertyId");

                    b.ToTable("ContractEntityProperty", "Cont");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentContentId");

                    b.HasIndex("DocumentDefinitionId");

                    b.ToTable("Document", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentAllowed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentAllowedTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentAllowedTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentAllowed", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentAllowedDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentAllowedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentOnlineSingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentRenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentUploadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentAllowedId");

                    b.HasIndex("DocumentOnlineSingId");

                    b.HasIndex("DocumentRenderId");

                    b.HasIndex("DocumentUploadId");

                    b.ToTable("DocumentAllowedDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentAllowedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentAllowedType", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentVersionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("KiloBytesSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionsId");

                    b.ToTable("DocumentContent", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ContractDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentOnlineSingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentRenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentUploadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseStatusId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ContractDefinitionId");

                    b.HasIndex("DocumentOnlineSingId");

                    b.HasIndex("DocumentRenderId");

                    b.HasIndex("DocumentUploadId");

                    b.HasIndex("StatusId");

                    b.ToTable("DocumentDefinition", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentDefinitionLanguageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MultiLanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentDefinitionId");

                    b.HasIndex("MultiLanguageId");

                    b.ToTable("DocumentDefinitionLanguageDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentEntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityPropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentDefinitionId");

                    b.HasIndex("EntityPropertyId");

                    b.ToTable("DocumentEntityProperty", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormIO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentFormIO", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormIODetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentFormIOId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentRenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFormIOId");

                    b.HasIndex("DocumentRenderId");

                    b.ToTable("DocumentFormIODetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentFormatTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentSizeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFormatTypeId");

                    b.HasIndex("DocumentSizeId");

                    b.ToTable("DocumentFormat", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormatDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentFormatId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentUploadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFormatId");

                    b.HasIndex("DocumentUploadId");

                    b.ToTable("DocumentFormatDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormatType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentFormatType", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("DocumentGroup", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroupDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentGroupID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentDefinitionId");

                    b.HasIndex("DocumentGroupID");

                    b.ToTable("DocumentGroupDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroupLanguageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MultiLanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("MultiLanguageId");

                    b.ToTable("DocumentGroupLanguageDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentOptimize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<bool>("Size")
                        .HasColumnType("boolean");

                    b.Property<string>("Transform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentOptimize", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<decimal>("KiloBytes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DocumentSize", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DocumentDefinitionId");

                    b.ToTable("DocumentTag", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentTemplate", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTemplateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentOnlineSingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentRenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentOnlineSingId");

                    b.HasIndex("DocumentRenderId");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("DocumentTemplateDetail", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentVersionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionsId");

                    b.ToTable("DocumentOnlineSing", "DocTp");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentVersionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DocumentVersionsId");

                    b.ToTable("DocumentRender", "DocTp");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DocumentUpload", "DocTp");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentVersions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentVersions", "Doc");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.EAV.EntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityPropertyTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityPropertyValueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityPropertyTypeId");

                    b.HasIndex("EntityPropertyValueId");

                    b.ToTable("EntityProperty", "EAV");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.EAV.EntityPropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EntityPropertyType", "EAV");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.EAV.EntityPropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EntityPropertyValue", "EAV");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Common.MultiLanguage", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Common.LanguageType", "LanguageType")
                        .WithMany()
                        .HasForeignKey("LanguageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageType");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractDefinition", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Common.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractDocumentDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Contract.ContractDefinition", "ContractDefinition")
                        .WithMany()
                        .HasForeignKey("ContractDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", "DocumentDefinition")
                        .WithMany()
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractDefinition");

                    b.Navigation("DocumentDefinition");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractEntityProperty", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Contract.ContractDefinition", "ContractDefinition")
                        .WithMany("ContractEntityProperty")
                        .HasForeignKey("ContractDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.EAV.EntityProperty", "EntityProperty")
                        .WithMany()
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractDefinition");

                    b.Navigation("EntityProperty");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.Document", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentContent", "DocumentContent")
                        .WithMany()
                        .HasForeignKey("DocumentContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", "DocumentDefinition")
                        .WithMany()
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentContent");

                    b.Navigation("DocumentDefinition");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentAllowed", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentAllowedType", "DocumentAllowedType")
                        .WithMany()
                        .HasForeignKey("DocumentAllowedTypeId");

                    b.Navigation("DocumentAllowedType");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentAllowedDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentAllowed", "DocumentAllowed")
                        .WithMany()
                        .HasForeignKey("DocumentAllowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", null)
                        .WithMany("DocumentAllowedDetails")
                        .HasForeignKey("DocumentOnlineSingId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", null)
                        .WithMany("DocumentAllowedDetails")
                        .HasForeignKey("DocumentRenderId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentUpload", null)
                        .WithMany("DocumentAllowedDetails")
                        .HasForeignKey("DocumentUploadId");

                    b.Navigation("DocumentAllowed");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentContent", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentVersions", "DocumentVersions")
                        .WithMany()
                        .HasForeignKey("DocumentVersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentVersions");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentDefinition", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Common.Status", "BaseStatus")
                        .WithMany()
                        .HasForeignKey("BaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Contract.ContractDefinition", null)
                        .WithMany("DocumentDefinitions")
                        .HasForeignKey("ContractDefinitionId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", "DocumentOnlineSing")
                        .WithMany()
                        .HasForeignKey("DocumentOnlineSingId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", "DocumentRender")
                        .WithMany()
                        .HasForeignKey("DocumentRenderId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentUpload", "DocumentUpload")
                        .WithMany()
                        .HasForeignKey("DocumentUploadId");

                    b.HasOne("amorphie.contract.core.Entity.Common.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseStatus");

                    b.Navigation("DocumentOnlineSing");

                    b.Navigation("DocumentRender");

                    b.Navigation("DocumentUpload");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentDefinitionLanguageDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", null)
                        .WithMany("DocumentDefinitionLanguageDetails")
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Common.MultiLanguage", "MultiLanguage")
                        .WithMany()
                        .HasForeignKey("MultiLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiLanguage");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentEntityProperty", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", null)
                        .WithMany("DocumentEntityPropertys")
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.EAV.EntityProperty", "EntityProperty")
                        .WithMany()
                        .HasForeignKey("EntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityProperty");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormIODetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentFormIO", "DocumentFormIO")
                        .WithMany()
                        .HasForeignKey("DocumentFormIOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", null)
                        .WithMany("DocumentFormIODetail")
                        .HasForeignKey("DocumentRenderId");

                    b.Navigation("DocumentFormIO");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormat", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentFormatType", "DocumentFormatType")
                        .WithMany()
                        .HasForeignKey("DocumentFormatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentSize", "DocumentSize")
                        .WithMany()
                        .HasForeignKey("DocumentSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentFormatType");

                    b.Navigation("DocumentSize");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentFormatDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentFormat", "DocumentFormat")
                        .WithMany()
                        .HasForeignKey("DocumentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentUpload", null)
                        .WithMany("DocumentFormatDetails")
                        .HasForeignKey("DocumentUploadId");

                    b.Navigation("DocumentFormat");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroup", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Common.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroupDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", "DocumentDefinition")
                        .WithMany()
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentGroup", "DocumentGroup")
                        .WithMany("DocumentGroupDetails")
                        .HasForeignKey("DocumentGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentDefinition");

                    b.Navigation("DocumentGroup");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroupLanguageDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentGroup", "DocumentGroup")
                        .WithMany("DocumentGroupLanguageDetail")
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.Common.MultiLanguage", "MultiLanguage")
                        .WithMany()
                        .HasForeignKey("MultiLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentGroup");

                    b.Navigation("MultiLanguage");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTag", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentDefinition", null)
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTemplate", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Common.LanguageType", "LanguageType")
                        .WithMany()
                        .HasForeignKey("LanguageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageType");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTemplateDetail", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", null)
                        .WithMany("DocumentTemplateDetails")
                        .HasForeignKey("DocumentOnlineSingId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", null)
                        .WithMany("DocumentTemplateDetails")
                        .HasForeignKey("DocumentRenderId");

                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTemplate");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentVersions", "DocumentVersions")
                        .WithMany()
                        .HasForeignKey("DocumentVersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentVersions");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.Document.DocumentVersions", "DocumentVersions")
                        .WithMany()
                        .HasForeignKey("DocumentVersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentVersions");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.EAV.EntityProperty", b =>
                {
                    b.HasOne("amorphie.contract.core.Entity.EAV.EntityPropertyType", "EntityPropertyType")
                        .WithMany()
                        .HasForeignKey("EntityPropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("amorphie.contract.core.Entity.EAV.EntityPropertyValue", "EntityPropertyValue")
                        .WithMany()
                        .HasForeignKey("EntityPropertyValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPropertyType");

                    b.Navigation("EntityPropertyValue");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Contract.ContractDefinition", b =>
                {
                    b.Navigation("ContractEntityProperty");

                    b.Navigation("DocumentDefinitions");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentDefinition", b =>
                {
                    b.Navigation("DocumentDefinitionLanguageDetails");

                    b.Navigation("DocumentEntityPropertys");

                    b.Navigation("DocumentTags");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentGroup", b =>
                {
                    b.Navigation("DocumentGroupDetails");

                    b.Navigation("DocumentGroupLanguageDetail");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentOnlineSing", b =>
                {
                    b.Navigation("DocumentAllowedDetails");

                    b.Navigation("DocumentTemplateDetails");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentRender", b =>
                {
                    b.Navigation("DocumentAllowedDetails");

                    b.Navigation("DocumentFormIODetail");

                    b.Navigation("DocumentTemplateDetails");
                });

            modelBuilder.Entity("amorphie.contract.core.Entity.Document.DocumentTypes.DocumentUpload", b =>
                {
                    b.Navigation("DocumentAllowedDetails");

                    b.Navigation("DocumentFormatDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
